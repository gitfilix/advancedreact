type Dog {
  name: String!
}

# we create a Dog, type = string, != required , : Dog will be returned
type Mutation {
  createDog(name: String!) : Dog
}

type Query {
  dogs: [Dog]!
}



datamodel.prisma:

type User {
  id: ID! @id
  name: String!
  email: String!
}

type Item {
  id: ID! @id
  title: String!
  description: String! 
  image: String
  largeImage: String
  price: Int!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

after that
-> run 
## npm run deploy


-> then the prisma.graphql file will be generated / & updatedAt

in createServer:

  context: req => ({ ...req, db })
therefore  -> we have access of the db via contex (ctx) connection

-> so we use it in Mutation

update ItemupdateItem(parent, args, ctx, info) {
    // first take a copy of updates:
    const updates = { ...args }
    // remove ID from updates - as we never what to update the id
    delete updates.id 
    // run the update method - so we have access to all the mutation methods of prisma.graphql
    return ctx.db.mutation.updateItem(
      {
        data: updates,
        where: {
          id: args.id 
        },
      }, info
    )
  }




cloudinary img service
-------------------------
pw: 1333-SickFits_$$

cloudname: filiks-pix100

img-upload preset: sickfits



